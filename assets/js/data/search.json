[ { "title": "corejs报错", "url": "/posts/corejserror/", "categories": "技术、前端", "tags": "随笔", "date": "2022-11-20 15:05:28 +0800", "snippet": "重新安装的项目依赖，运行报错/modules/es.array.push.jsThese dependencies were not found:* core-js/modules/es.array.push.js in ./node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js, ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.j..." }, { "title": "前端工程化建设", "url": "/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/", "categories": "技术、前端", "tags": "随笔", "date": "2022-11-01 15:05:28 +0800", "snippet": "1、定义将软件工程方法论应用于前端的开发、部署、维护，通过规范、工程框架和工具链来结局效率、质量、性能问题。why？ web应用的复杂度上升 前端业务团队熵增 如何提升效率 如何保障质量和性能 规范/最佳实践 工具/平台 脚手架/解决方案不同视角的理解 中小型业务团队 效率 复杂业务团队 统一、治理 中台团队 抽象、赋能 团队中的个人 认知成本、效率原则 没有银弹 某些好的实践未必适合我们团队 不盲目投入 认识当前所处的阶段和主要矛盾实践思路 问题 度量 解决方法 造轮子 or 开箱即用 规范 结合工作流 基础设施 平台、工具业务团队 规范先行..." }, { "title": "前端监控", "url": "/posts/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/", "categories": "技术、前端", "tags": "随笔", "date": "2022-10-31 05:05:28 +0800", "snippet": "1、sentry用户时间序列，sorce map围绕 Error 来组织，不实用2、阿里云 ARMS功能组织是想要的，太贵了。3、岳鹰功能组织是想要的，不能私有化部署自研：需求分析：前端工程师观察业务效果、分析线上问题、发现优化空间的监控工具。观察业务效果：页面访问，自定义上报分析线上问题：页面访问，接口请求，前端报错发现优化空间：页面性能、资源加载整体设计参数设置debugsendPVsendApisendResourcesendPerfspabizUserIdbizUserType日志上报设计使用 Post ：延迟上报 + 聚合上报 + 重试机制（后面俩队列）+ 推出兜底（sendB..." }, { "title": "小码哥css总结", "url": "/posts/%E5%B0%8F%E7%A0%81%E5%93%A5css%E6%80%BB%E7%BB%93/", "categories": "技术、前端", "tags": "随笔", "date": "2022-04-07 05:05:28 +0800", "snippet": "html元素 脱标元素 特点 随意设置宽高 如果没有设置宽高，宽高由内容决定 不在受标准流（normal flow）的约束 不在严格分块级元素、行内级元素 元素内部默认还是按照标准流 哪些元素是脱标元素 浮动元素 Float:left ..." }, { "title": "前端面试题", "url": "/posts/%E5%89%8D%E7%AB%AF%E6%80%BB%E7%BB%93/", "categories": "技术", "tags": "随笔", "date": "2022-02-25 05:05:28 +0800", "snippet": "1、状态码1xx 信息状态码 2xx 200 成功 201 请求成功并且服务器创建了新的资源 202 服务器已接受了请求，但是尚未处理。3xx 重定向 301 请求网友永久移动到新位置 302 临时性重定向 304 自从上次请求后网页未修改过，可以使用缓存。4xx 404找不到资源 403 禁止访问 401 请求未授权5xx 服务器相关 500，服务器错误 503 服务器端暂时无法处理请求2、图片懒加载是一种优化方式，能够在页面没有显示出来的时候不去请求。基本思路，根据滑动，判断显示图片的元素是否出现。3、路由懒加载原来是 import a from ‘./a’改为动态 const a ..." }, { "title": "iOS面试题", "url": "/posts/ios%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/", "categories": "技术", "tags": "随笔", "date": "2022-02-17 05:05:28 +0800", "snippet": "讲讲GCDGCD是用来解决多线程编程的。这是一个比较底层、高效的API，iOS4就可以使用了。平时用的的比较多是，在子线程完成数据的请求，在主线程渲染。dispatch_sync(dispatch_get_main_queue()简述NSOperationQueue与GCD的区别(1) GCD是底层的C语言构成的API。NSOperationQueue及相关对象是Objc对象。在GCD中，在队列中执行的是由block构成的任务，这是一个轻量级的数据结构。而Operation作为一个对象，为我们提供了更多的选择。(2) 在NSOperationQueue中，我们可以取消任务，而GCD没法停..." }, { "title": "uniapp、原生小程序混合开发", "url": "/posts/uniapp-%E5%8E%9F%E7%94%9F%E5%B0%8F%E7%A8%8B%E5%BA%8F/", "categories": "技术", "tags": "随笔", "date": "2022-02-11 05:05:28 +0800", "snippet": "因为业务需求，新开发的功能需要支持多平台，而原来的是原声写的小程序。公司现在基本框架是使用VUE写，所以倾向使用uniapp。网上找了很多方案，无非三种， 1、原生小程序转成uniapp，有第三方工具。问题：只是转成uniapp后，无法在运行小程序。而且第三方不保证效果。 2、uniapp开发新功能，新开发的功能发不成H5，放到web-view中。这个后面详细说。 3、uniapp开发新功能，新功能转成原生小程序集成到原生里面。有点，可以使用原生的功能，uniapp还可以继续开发别的平台。最后采用这种方式。最初选择方案2，因为现在H5性能也跟的上了。但是遇到了几个问题，最初的都解决..." }, { "title": "年终总结", "url": "/posts/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/", "categories": "生活", "tags": "随笔", "date": "2022-01-25 05:05:28 +0800", "snippet": " 一年一度的年终总结时间到了。去年的拖着没写。今年刚好放假前没事，一边看着swift视频，一边写写。 分几个方面写吧。工作本来想把生活放在前面写，但是好像没什么可写，或者离不开工作。所以把工作移到前面。今年终于下定决心换工作了。之前在某央企，算是挂狗头卖羊肉的那种吧。之前一直在学习前端，因为iOS客户端开发，就业面太窄了。这个时候开始投简历，把公司附近的都投了，也拿了不少offer，有工资高的，有大小周的。但是想找个距离家近一些的，逐都被选了。（前几篇有想过面试。）因为去年太累了，想找个轻松点稳定一些的工作，于是选择了一个某国企的三级子公司。进去之后发现就是个坑，刚开始还按时上下..." }, { "title": "周末小记", "url": "/posts/%E5%91%A8%E6%9C%AB%E5%B0%8F%E8%AE%B01/", "categories": "生活", "tags": "随笔", "date": "2021-12-04 21:46:28 +0800", "snippet": " 许久没有写博客了。因为工作一直没有稳定下来，现在稳定了，写一写这段历。 人生就是这样，你想再等等，另一方则非让你定下来。两次两个截然不同的选择，结局也截然不同。第一次，老板说，让我定一下，不要这山望着那山高。这个公司，暂称A吧。A公司是一国企的三级子公司。当时去面试，公司位置是不错的。只是老写字楼，格局真的不敢恭维，办公环境真的很一般，本着想休息一下，不想再加班，每天早出晚归的通勤，即使工资降低的情况下，选择这家公司。此公司算是国企，福利待遇跟国企看齐，本以为是个创业公司，就这么几个人（不到10人），不会有官僚作风，想着好好努力，做出好的产品。刚去的时候，有点不适。当时跟自己说，..." }, { "title": "测试", "url": "/posts/%E5%91%A8%E6%9C%AB%E5%B0%8F%E8%AE%B02/", "categories": "生活", "tags": "随笔", "date": "2021-09-23 05:05:28 +0800", "snippet": "离开A公司后，这次一点也不着急找工作。这次找工作第一要离家近。找工作就是这样，你着急的时候，对方不急，你不急的时候，对方就着急。公司C，本来只是想去练手，面试的时候，是产品面的。因为没有技术面，我内心不安心，感觉这样不安稳。加上去的时候，公司实在拥挤不堪。其他面试不表看到一个公司D，说总部在我们这个区。因为这个公司之前在北京，好像还是xxx的子公司。看公司挺正规的，想着应该技术氛围不错，联系投简历。技术面还是挺顺利的，技术面后，领导面，约的" }, { "title": "自问自答-1", "url": "/posts/%E6%B5%8B%E8%AF%95/", "categories": "生活", "tags": "随笔", "date": "2021-09-23 05:05:28 +0800", "snippet": "前端jsjs的数据类型：简单类型，简单类型是number，string，bool，#####" }, { "title": "一次突然的面试-续", "url": "/posts/%E4%B8%80%E6%AC%A1%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95-%E7%BB%AD/", "categories": "技术", "tags": "前端", "date": "2021-07-21 10:05:28 +0800", "snippet": " 早上又接到电，还是昨天的公司，只不过换了一个女的。还以为是人事结果还是技术。单页面多页面的区别vuex 及传值（上篇）场景，持续化数据传输，传感器。开发流程代码管理如何SEOvueRouter两种" }, { "title": "一次突然的面试", "url": "/posts/%E4%B8%80%E6%AC%A1%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95/", "categories": "技术", "tags": "前端", "date": "2021-07-20 05:05:28 +0800", "snippet": " 很突然的一次电话面试，接到电话就问之前做过iOS，怎么做前端了。ES6用过哪些let、const，这种最简单的，不存在变量提升。高阶函数，map，filter，reduce。各个使用场景。事后总结：1、let、const2、箭头函数3、template string 模版字符串4、Destructurin 解构let a=10 ;let obj = { a}5、… 运算符6、函数的参数默认值vue值传递父子之间，父子之间prop，子父$emit非父子之间，vuex事后总结： 项目中有多层组件传参可以使用$attrs，可以使代码更加美观，更加简洁，维护代码的时候更方便。如果使用..." }, { "title": "iOS之国际化", "url": "/posts/iOS%E5%9B%BD%E9%99%85%E5%8C%96/", "categories": "技术", "tags": "iOS", "date": "2021-04-28 09:05:28 +0800", "snippet": " 最近接到之前项目的一个新的需求,要求国际化，实现对简体、繁体和英的对支持。之前也做过国际化，那个时候主要依赖 *Localizable.strings* 和 *宏NSLocalizedString*，那个时候，同事主导，我们敲边鼓。赵同学整理好Localizeble.string文件，我们帮忙替换字符串为宏。而且，他设置key为字符串的汉语拼音首字母，当时还觉得不错。这次刚开始，我也是这样做的，自己整理Localizeble.string文件。使用首字母替换。但是这样太累了。效率巨低。有一次不小心还把文件丢了。因祸得福吧，丢了就重新搞，重新搞就肯定不用拼音首字母了。先尝试了使用汉字也..." }, { "title": "Vue路由", "url": "/posts/Vue%E8%B7%AF%E7%94%B1/", "categories": "技术", "tags": "博客, 面试", "date": "2021-04-09 09:05:28 +0800", "snippet": " 路由也是全家桶里重要的一部分,watch 可以做异步操作，computer不可以。路由守卫正如其名，vue-router 提供的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局的, 单个路由独享的, 或者组件级的。记住参数或查询的改变并不会触发进入/离开的导航守卫。你可以通过观察 $route 对象来应对这些变化，或使用 beforeRouteUpdate 的组件内守卫。全局前置守卫你可以使用 router.beforeEach 注册一个全局前置守卫：const router = new VueRouter({ ... })router.beforeE..." }, { "title": "Vuex小结", "url": "/posts/Vuex%E5%B0%8F%E7%BB%93/", "categories": "技术", "tags": "博客, 面试", "date": "2021-04-02 09:05:28 +0800", "snippet": " 全局管理状态的控件介绍状态自管理应用包含以下几个部分： state，驱动应用的数据源； view，以声明方式将 state 映射到视图； actions，响应在 view 上的用户输入导致的状态变化。使用场景 中大型的单页面应用每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的状态 (state)。Vuex 和单纯的全局对象有以下两点不同：1、Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。2、不能直接改变 s..." }, { "title": "深拷贝与浅拷贝", "url": "/posts/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/", "categories": "技术", "tags": "博客, 面试", "date": "2021-04-01 09:05:28 +0800", "snippet": " 面试问到这个，深拷贝答的不错，但是把浅拷贝忘记了。原因js的数据分为基本类型和引用类型。简单解析三个概念，赋值、浅拷贝和深拷贝。赋值 ，这个好理解，直接赋值即可。如果是引用类型，修改被赋值的变量，原来的变量也会改变。浅拷贝 ，通俗的讲，新建一个对象，只复制第一层。也会带来修改新对象，老对象同时改变的副作用。深拷贝 ，解决了以上问题。可以解决嵌套对象的赋值后，修改影响原来对象的bug。浅拷贝浅拷贝是创建一个新对象，这个对象有原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的是基本类型的值；如果属性是引用类型，拷贝的就是内存地址，所以如果其中一个对象改变了这个地址，就会影响另一个对..." }, { "title": "JS模块化", "url": "/posts/JS%E6%A8%A1%E5%9D%97%E5%8C%96/", "categories": "技术", "tags": "博客, 面试", "date": "2021-03-31 09:05:28 +0800", "snippet": "js模块化是面试经常被问到的一个问题，也是开发中经常使用的规范。为什么？js因为历史原因，先天不足。设计之初没有命名空间，模块化的考虑。但是模块化有让工程目录清晰，有利于大型项目的开发。所以产生CommonJS和后来的补丁ES6的补充。带来的好处 解决命名冲突 提供复用性 提高代码可维护性如何使用？Module设计模式上古时代，可以使用闭包解决。也就是Module设计模式。let myModule = (function (window) { let moduleName = &#39;module&#39; // private // public funct..." }, { "title": "关于vue插槽那些事", "url": "/posts/%E5%85%B3%E4%BA%8Evue%E6%8F%92%E6%A7%BD%E9%82%A3%E4%BA%9B%E4%BA%8B/", "categories": "技术", "tags": "博客", "date": "2021-03-26 11:12:28 +0800", "snippet": " 看再多教程，不如写一次试试为什么使用插槽呢？我们平时编程，都会遇到变量传递到子组件显示。那么想传递样式呢？根据变量去修改，不够优雅，所以诞生了插槽，可以把样式通过插槽传递到自组件实现。使用场景一些固定位置，但是内容样式不固定。比如，导航，基本都是三部分，但是有的页面，可能两部分，或者，主题不一样。具名插槽1、子组件&amp;lt;template&amp;gt; &amp;lt;div class=&quot;nav-bar&quot;&amp;gt; &amp;lt;div class=&quot;left&quot;&amp;gt; &amp;lt;slot n..." }, { "title": "第一次前端面试总结", "url": "/posts/%E4%B8%80%E6%AC%A1%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/", "categories": "技术", "tags": "博客, 面试", "date": "2021-03-26 11:12:28 +0800", "snippet": " 准备转行前端，真正意义上（===，上次是电话面试），第一次前端面试。某程控股面试还是挺正规的，上来女主持人就说了，面试三部分，介绍公司，技术面试，答疑。技术面试，一个大哥，拿了一个小本本，那种已经写满了字的那种，典型程序员啊。面试问的很细，很细。基本接近头发丝了。还有印象的（答的不好的），有以下几个。1、vue对象嵌套很多数据后，数据改变，界面不变2、vuex 相关，这个复习了。但是记不清了。3、CSS薄弱，什么时候使用contentbox，borderbox4、跨域，服务器这边没怎么说。5、webpack，这个我说自己比较薄弱，只问了loader6、JS原理，说了，没成提醒，把内存..." }, { "title": "第一次前端电话面试总结", "url": "/posts/%E4%B8%80%E6%AC%A1%E5%89%8D%E7%AB%AF%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/", "categories": "技术", "tags": "博客, 面试", "date": "2021-03-25 18:12:28 +0800", "snippet": " 准备转行前端，真正意义上到第一次前端面试。某 视角1、子组件为什么不能直接操作父组件的数据为何不能修改：为了保证数据的单向流动，便于对数据进行追踪，避免数据混乱。官网有详细的信息 prop,官方：所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。 而且会报警告。2、watch 和 computer 的区别watch是个过程，观察的是某个属性，只能是一个，可以获取这个属性新旧值。首次/刷新监听不到。一个数据影响多个数据。 监..." }, { "title": "为什么使用github io", "url": "/posts/why-wirte-blog/", "categories": "技术", "tags": "博客, 随笔", "date": "2021-03-25 10:52:28 +0800", "snippet": "为什么使用github io 多年后的我又开始写博客了刚上大学的时候，计算机老师让我们每个人都注册一个csdn，当时老师还让我们签到拿积分（暴露年龄了），这样可以以后随便下载资源。​ 那时候的CSDN，还是挺好的。后来兴起了很多轻博客，只不过，都是大浪淘沙，没过几年就倒闭关了，有段时间还写过轻博客。​ 大学的时候还是比较喜欢写博客的，主要为了记录学习成果吧。​ 那时候学嵌入式，可以写的东西很多。印象比较深的是，自己在宿舍做 leetcode ，当时就会C语言啊。就用C写。​ 大学的时候，真的是能折腾啊。ubuntu 每个版本都安装，电脑是双系统的，还搞过CompizConfig，就为了..." }, { "title": "如何搭建github io 博客", "url": "/posts/my-first-blog/", "categories": "技术", "tags": "博客", "date": "2021-03-25 10:52:28 +0800", "snippet": " 趁着热乎，简单写一下流程1、 注册github2、 新建一个repo，命名 yourBlogName.github.io3、 到这个repo里，选择setting，下拉，选择theme。此处也可以直接放一个index.html文件4、 上传文件5、 输入yourBlogName.github.io，访问即可6、 如果你想定制自己的主题。 修改主题。我选择的是 https://github.com/cotes2020/jekyll-theme-chirpy/blob/master/docs/README.zh-CN.md 这个主题，基本是按照这个步骤来的7、 GitHub Pages ..." }, { "title": "swift基础", "url": "/posts/swift/", "categories": "生活", "tags": "随笔", "date": "2021-01-25 05:05:28 +0800", "snippet": "let 定义常量，只要在使用前赋值即可。而且只能赋值一次。struct 混编OC调用swift在创建swift文件的时候，xcode会帮你生成oc调用swift的头文件 (项目名)-Swift.h前提:在oc类中引入 #import &quot;ProductName-Swift.h&quot;。这个xcode不会帮你补齐。需要手动输入。此时你直掉调用发现会报错。 No visible @interface for &#39;xxxSwift&#39; declares the selector &#39;swiftMethod:&#39;这是因为没有把oc调用的方法暴露出来，在你要调用..." }, { "title": "iOS打包脚本", "url": "/posts/iOS%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC/", "categories": "技术", "tags": "随笔", "date": "2021-01-01 05:05:28 +0800", "snippet": " 从事iOS开发六七年了，之前因为业务需要，写过重签名脚本。这次写脚本主要是为了打测试包，发布到本地，供测试同学使用.感谢伟大的搜索引擎。搜到一篇文章。照着做下来，此处只记录几个需要注意的地方（我是在M1操作的）。1、目录结构2、ngix的配置。 参考： https://cba023.github.io/posts/5b8e9f57/" } ]
